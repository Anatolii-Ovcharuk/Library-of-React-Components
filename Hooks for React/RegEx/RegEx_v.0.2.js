/* "RegEx", v. 0.2 - 22.01.2025 | MIT License | Made by Anatolii Ovcharuk - https://github.com/Anatolii-Ovcharuk */
/* Description: This is a JS File for JavaScript and Node.js. */

/* Флаги регулярных выражений:
    g — глобальный поиск
    i — нечувствительность к регистру
    m — многострочный режим
*/

const email = [
    /^[a-zA-Z0-9]+([._-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(\.[a-zA-Z]{2,})?$/im, // 0 - Email (не допускает точку в начале и конце, допускает двойные домены)
    /^[a-zA-Z0-9]+([._-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(\.[a-zA-Z]{2,})?$/gim, // 1 - Email (не допускает точку в начале и конце, допускает двойные домены)
];

const time = [
    /^\d+$/, // 0 - Числовой формат (UNIX)
    /^\d{2}\.\d{2}\.\d{2}$/, // 1 - Формат "DD.MM.YYYY"
    /^\d{2}.\d{2}.\d{2}$/, // 2 - Формат "DD.MM.YYYY"
    /^\d{2}-\d{2}-\d{2}$/, // 3 - Формат "DD-MM-YYYY"
    /^\d{4}-\d{2}-\d{2}$/, // 4 - Формат "YYYY-MM-DD"
    /^\b(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}\b$/,  // 5 - DD.MM.YYYY
    /^\b(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\d{4}\b$/,  // 6 - DD-MM-YYYY
];

const telephone = [
    /^\+?[1-9]\d{1,14}$/,  // 0 - Международный формат (E.164) (+123456789).
    /^\+?[1-9]\d{0,2}[-\s]?\(?\d{1,4}\)?[-\s]?\d{3,4}[-\s]?\d{4}$/, // 1 - Вариант 2, но с уточнением основного номера;
    /^\+?[1-9]\d{0,2}[-\s]?\(?\d{1,4}\)?[-\s]?\d{1,4}[-\s]?\d{1,9}$/, // 2 - +?[1-9]\d{0,2} — код страны, может начинаться с + [-\s]? — разделители (- или пробел) \(?\d{1,4}\)? — код города в скобках (опционально) [-\s]?\d{1,4}[-\s]?\d{1,9} — основной номер с разделителями. +1-202-555-0123; +44 20 7946 0958; +380 (50) 123-45-67; +7 926 123 4567;
];

const url = [
    /^(http|https):\/\/[^\s/$.?#].[^\s]*$/i, // 0 - Разрешает https:// и http:// с разделителем первого и второго уровня через "."
    /^(https?:\/\/)?([\w-]+\.)+[\w-]{2,}(\/[^\s]*)?$/i // https?:\/\/ — делает http:// или https:// необязательным. ([\w-]+\.)+[\w-]{2,} — требует доменное имя (example.com). \/[^\s]* — позволяет путь (/path/to/page).
];

const ip4 = [
    /^(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/,  // 0 - IPv4
];

const ip6 = [
    /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}))$/, // 0 - IPv6-проверка учитывает сокращённую форму (::).
    /^([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4})$/,  // 1 - IPv6, без поддержки сокращений.
];

const password = [
    /^.{8,}$/, // 0 - Минимум 8 символов, abcdefgH, 12345678, !@#ABCdef
    /^\d{8,}$/, // 1 - Только цифры, минимум 8. 12345678, 9876543210
    /^[a-zA-Z\d@$!%*#?&]{8,}$/, // 2 - Строка должна состоять минимум из 8 символов, разрешённые символы: Латинские буквы (a–z, A–Z), Цифры (0–9), Спецсимволы: @ $ ! % * # ? &
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/,  // 3 - Минимум 8 символов, одна заглавная буква, одна цифра.
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*#?&]{8,}$/,  // 4 - Минимум 8 символов, одна заглавная буква, одна строчная буква, одна цифра. Разрешённые символы: a-z, A-Z, 0-9, @$!%*#?&.
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_])[a-zA-Z\d\W_]{10,}$/, // 5 - Минимум 10 символов, одна заглавная, одна строчная, одна цифра, один спецсимвол.
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{10,}$/, // 6 - Минимум 10 символов, с ограничениями на допустимые символы, одна заглавная, одна строчная, одна цифра, один спецсимвол.
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_])[a-zA-Z\d\W_]{12,}$/,  // 7 - Минимум 12 символов, одна заглавная, одна строчная, одна цифра, один спецсимвол.
];

const hexColor = [
    /^#([0-9A-Fa-f]{3}){1,2}$/,  // 0 - HEX-код цвета (#fff, #ffffff)
];

const uuid = [
    /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,  // 0 - UUID v4
];

const creditCard = [
    /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})$/,  // 0 - Visa, MasterCard, Amex, Diners, Discover, JCB
];

const text = [
    /^[A-Za-z0-9_]+$/, // 0 - Проверка строки на наличие только букв, цифр и подчеркиваний
    /^[a-zA-Z\s]+$/, // 1 - Разрешает только английские буквы и пробелы (только латиница). 
    /^[a-zA-Z\s-]+$/, // 2 - Разрешает только английские буквы, пробелы и дефисы (только латиница). 
    /^[а-яА-ЯёЁ\s]+$/,  // 3 - Только русские буквы и пробелы
    /^[а-яА-ЯёЁ\s-]+$/, // 4 - Только русские буквы, пробелы и дефисы
    /^[а-яА-ЯёЁіІїЇєЄґҐ\s]+$/, // 5 - Разрешает только украинские буквы и пробелы.
    /^[а-яА-ЯёЁіІїЇєЄґҐ\s-]+$/, // 6 - Разрешает только украинские буквы, пробелы и дефисы.
];

function testRegEx(value, regex) {
    try {
        if (typeof value === 'string' && regex instanceof RegExp) { // value && regex, && value.trim() !== '' - Выражение для исключения пустых строк
            return regex.test(value); // True or False
        } else {
            return null;
        };
    } catch (error) {
        console.error("Error with RegEx function:", error.message);
        return null;
    };
};

function matchRegEx(value, regex) {
    try {
        if (typeof value === 'string' && regex instanceof RegExp) { // value && regex, && value.trim() !== '' - Выражение для исключения пустых строк
            return value.match(regex) || []; // Example: "Hello world, HELLO again".match(/hello/gi)) - return ["Hello", "HELLO"]
        } else {
            return null;
        };
    } catch (error) {
        console.error("Error with RegEx function:", error.message);
        return null;
    };
};

const RegEx = {
    email: email[0],
    time: time[0],
    password: password[0],
    telephone: telephone[0],
    creditCard: creditCard[0],
    text: text[0],
    hex: hexColor[0],
    url: url[0],
    ip4: ip4[0],
    ip6: ip6[0],
    uuid: uuid[0],
    values: {
        email: email,
        time: time,
        password: password,
        telephone: telephone,
        creditCard: creditCard,
        text: text,
        hex: hexColor,
        url: url,
        ip4: ip4,
        ip6: ip6,
        uuid: uuid,
    },
    test: testRegEx,
    match: matchRegEx,
};

export default RegEx;
// module.exports = RegEx;
